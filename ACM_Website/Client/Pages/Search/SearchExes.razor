@page "/searchexes/{constructionId:long}"
@inject ISearchService SearchService
@inject NavigationManager NavigationManager
@inject ICustomerService CustomerService
@inject IChatService ChatService
@inject ILocalStorageService LocalStorage

@if (Executors == null)
{
    <span>Загрузка...</span>
    <div class="@messageCssClass">
        <span>@message</span>
    </div>
}
else
{
    <MudTable Items="@Executors" Hover="true">
        <HeaderContent>
            <MudTh>Имя</MudTh>
            <MudTh>Контактные данные</MudTh>
            <MudTh>-</MudTh>
            <MudTh>-</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd>@context.Name</MudTd>
            <MudTd>@context.Contacts[0].Address</MudTd>
            <MudTd>
                <MudButton OnClick="@(() => ShowExecutor(context.Id))"
                           Variant="Variant.Filled"
                           StartIcon="@Icons.Material.Filled.Preview"
                           Color="Color.Info">Посмотреть профиль</MudButton>
            </MudTd>
            <MudTd>
                <MudButton OnClick="@(() => StartChat(context.Id))"
                           StartIcon="@Icons.Material.Filled.Send"
                           Variant="Variant.Filled"
                           Color="Color.Primary">Написать</MudButton>
            </MudTd>
        </RowTemplate>
    </MudTable>

    <div class="@messageCssClass">
        <span>@message</span>
    </div>
}

@code {
    List<WebExecutor> Executors;

    [Parameter]
    public long? ConstructionId { get; set; }

    string message = string.Empty;
    string messageCssClass = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        if (ConstructionId == null)
        {
            message = "Не задан объект";
            messageCssClass = "text-danger";
        }
        else
        {
            var request = await SearchService.GetExecutorsForConstruction(ConstructionId.Value);
            if (request.Success)
            {
                Executors = request.Data;
            }
            else
            {
                message = request.Message;
                messageCssClass = "text-danger";
            }
        }
    }

    void ShowExecutor(long id)
    {
        NavigationManager.NavigateTo($"/executor/{id}");
    }

    async Task StartChat(long id)
    {
        var userId = long.Parse(await LocalStorage.GetItemAsStringAsync("id"));
        var customer = await CustomerService.ExistCustomer(userId);
        if (customer.Success && customer.Data != 0)
        {
            long chatId = 0;
            var existChat = await ChatService.ExistChat(customer.Data, id);
            if (existChat.Success && existChat.Data != 0)
            {
                chatId = existChat.Data;
                NavigationManager.NavigateTo($"/chat/{chatId}");
            }
            else
            {
                var newChat = await ChatService.StartNewChat(customer.Data, id);
                if (newChat.Success)
                {
                    chatId = newChat.Data.Id;
                    NavigationManager.NavigateTo($"/chat/{chatId}");
                }
                else
                {
                    message = newChat.Message;
                    messageCssClass = "text-danger";
                }
            }
        }
        else
        {
            message = "Нет такого заказчика";
            messageCssClass = "text-danger";
        }
    }
}
