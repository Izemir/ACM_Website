@page "/createcustomer"
@inject ICustomerService CustomerService
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager

<h3>Создание Заказчика</h3>

<EditForm Model="customer" OnValidSubmit="HandleCreation">
    <DataAnnotationsValidator />
    <div class="mb-3">
        <label for="name">ФИО</label>
        <InputText id="name" @bind-Value="customer.Name" class="form-control" />
        <ValidationMessage For="@(() => customer.Name)" />
    </div>
    <div class="mb-3">
        <label for="address">Адрес</label>
        <InputText id="address" @bind-Value="customer.Address" class="form-control" />
        <ValidationMessage For="@(() => customer.Address)" />
    </div>
    <div class="mb-3">
        <label for="ogrn">ОГРН</label>
        <InputText id="ogrn" @bind-Value="customer.OGRN" class="form-control" />
        <ValidationMessage For="@(() => customer.OGRN)" />
    </div>
    <div class="mb-3">
        <label for="inn">ИНН</label>
        <InputText id="inn" @bind-Value="customer.INN" class="form-control" />
        <ValidationMessage For="@(() => customer.INN)" />
    </div>
    <div class="mb-3">
        <label for="kpp">КПП</label>
        <InputText id="kpp" @bind-Value="customer.KPP" class="form-control" />
        <ValidationMessage For="@(() => customer.KPP)" />
    </div>
    <div class="dropdown-divider"></div>
    <div class="mb-3">
        <label for="contactName">Имя контактного лица</label>
        <InputText id="contactName" @bind-Value="customer.ContactPersons[0].Name" class="form-control" />
        <ValidationMessage For="@(() => customer.ContactPersons[0].Name)" />
    </div>
    <div class="mb-3">
        <label for="contact">Контакт</label>
        <InputText id="contact" @bind-Value="customer.ContactPersons[0].Contacts[0].Address" class="form-control" />
        <ValidationMessage For="@(() => customer.ContactPersons[0].Contacts[0].Address)" />
    </div>
    <div class="form-group">
        <label for="customerType">Тип заказчика</label>
        <InputSelect id="customerType" @bind-Value="customer.CustomerType.Id" class="form-control">
            @foreach (var type in Types)
            {
                <option value="@type.Id">@type.TypeName</option>
            }
        </InputSelect>
    </div>
    <button type="submit" class="btn btn-primary">Создать</button>
    <div class="@messageCssClass">
        <span>@message</span>
    </div>
</EditForm>

@code {
    private WebCustomer customer = new WebCustomer();


    string message = string.Empty;
    string messageCssClass = string.Empty;
    public List<CustomerType> Types { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Types = new List<CustomerType>(){
            new CustomerType(){ Id=0, TypeName=""}
        };
        customer.CustomerType = Types[0];
        customer.ContactPersons = new List<ContactPerson>()
    {
            new ContactPerson()
            {
                Name="", Contacts=new List<Contact>(){new Contact() { Address=""} }
            }
        };

        var res = await CustomerService.GetCustomerTypes();
        if (res.Success)
        {
            Types = res.Data;
            //StateHasChanged();
        }
    }


    async Task HandleCreation()
    {
        var id = await LocalStorage.GetItemAsStringAsync("id");
        var result = await CustomerService.AddCustomer(customer, long.Parse(id));

        message = result.Message;
        if (result.Success)
        {
            Console.WriteLine(result.Data.Id);
            messageCssClass = "text-success";
            NavigationManager.NavigateTo("customer");
        }
        else
            messageCssClass = "text-danger";
    }

}
