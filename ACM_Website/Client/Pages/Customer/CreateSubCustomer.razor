@page "/createsubcustomer"
@page "/createsubcustomer/{subCustomerId:long}"
@inject ICustomerService CustomerService
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager

<h3>Создание Подрядчика</h3>

@if (SubCustomerId != null && subCustomer == null)
{
    <span>Загрузка...</span>
    <div class="@messageCssClass">
        <span>@message</span>
    </div>
}
else
{

    <EditForm Model="subCustomer" OnValidSubmit="HandleCreation">
        <DataAnnotationsValidator />
        <div class="mb-3">
            <label for="name">ФИО</label>
            <InputText id="name" @bind-Value="subCustomer.Name" class="form-control" />
            <ValidationMessage For="@(() => subCustomer.Name)" />
        </div>
        <div class="mb-3">
            <label for="address">Адрес</label>
            <InputText id="address" @bind-Value="subCustomer.Address" class="form-control" />
            <ValidationMessage For="@(() => subCustomer.Address)" />
        </div>
        <div class="mb-3">
            <label for="ogrn">ОГРН</label>
            <InputText id="ogrn" @bind-Value="subCustomer.OGRN" class="form-control" />
            <ValidationMessage For="@(() => subCustomer.OGRN)" />
        </div>
        <div class="mb-3">
            <label for="inn">ИНН</label>
            <InputText id="inn" @bind-Value="subCustomer.INN" class="form-control" />
            <ValidationMessage For="@(() => subCustomer.INN)" />
        </div>
        <div class="mb-3">
            <label for="kpp">КПП</label>
            <InputText id="kpp" @bind-Value="subCustomer.KPP" class="form-control" />
            <ValidationMessage For="@(() => subCustomer.KPP)" />
        </div>
        <div class="dropdown-divider"></div>
        <div class="mb-3">
            <label for="contactName">Имя контактного лица</label>
            <InputText id="contactName" @bind-Value="subCustomer.ContactPerson.Name" class="form-control" />
            <ValidationMessage For="@(() => subCustomer.ContactPerson.Name)" />
        </div>
        <div class="mb-3">
            <label for="contact">Контакт</label>
            <InputText id="contact" @bind-Value="subCustomer.ContactPerson.Contacts[0].Address" class="form-control" />
            <ValidationMessage For="@(() => subCustomer.ContactPerson.Contacts[0].Address)" />
        </div>
        <div class="form-group">
            <label for="customerType">Тип подрядчика</label>
            <InputSelect id="customerType" @bind-Value="subCustomer.CustomerType.Id" class="form-control">
                @foreach (var type in Types)
                    {
                    <option value="@type.Id">@type.TypeName</option>
                    }
            </InputSelect>
        </div>
        <button type="submit" class="btn btn-primary">Сохранить</button>
        <div class="@messageCssClass">
            <span>@message</span>
        </div>
    </EditForm>
}

@code {
    [Parameter]
    public long? SubCustomerId { get; set; }

    private WebSubCustomer subCustomer { get; set; }


    string message = string.Empty;
    string messageCssClass = string.Empty;
    public List<CustomerType> Types { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (SubCustomerId != null)
        {
            var userId = long.Parse(await LocalStorage.GetItemAsStringAsync("id"));
            var request = await CustomerService.ExistSubCustomer(userId);
            if (request.Success)
            {
                if (request.Data == SubCustomerId)
                {
                    var oldSubCustomer = await CustomerService.GetSubCustomerById(0,SubCustomerId.Value);
                    if (oldSubCustomer.Success)
                    {
                        subCustomer = oldSubCustomer.Data;

                    }
                    else
                    {
                        message = request.Message;
                        messageCssClass = "text-danger";
                    }
                }
                else
                {
                    message = "Нет прав на изменение";
                    messageCssClass = "text-danger";
                }

            }
            else
            {
                message = request.Message;
                messageCssClass = "text-danger";
            }

        }
        else
        {
            subCustomer = new WebSubCustomer();
            Types = new List<CustomerType>(){
            new CustomerType(){ Id=0, TypeName=""}
            };

            subCustomer.CustomerType = Types[0];
            subCustomer.ContactPerson = new ContactPerson()
            {Name="", Contacts=new List<Contact>(){new Contact() { Address=""} }            
            };
        }

        var res = await CustomerService.GetCustomerTypes();
        if (res.Success)
        {
            Types = res.Data;
            //StateHasChanged();
        }
    }


    async Task HandleCreation()
    {
        if (SubCustomerId != null)
        {
            var result = await CustomerService.UpdateSubCustomer(subCustomer);

            message = result.Message;
            if (result.Success)
            {
                NavigationManager.NavigateTo("subcustomer");
            }
            else
            {
                message = result.Message;
                messageCssClass = "text-danger";
            }

        }
        else
        {
            var id = await LocalStorage.GetItemAsStringAsync("id");
            var result = await CustomerService.AddSubCustomer(subCustomer, long.Parse(id));

            message = result.Message;
            if (result.Success)
            {
                NavigationManager.NavigateTo("subcustomer");
            }
            else
            {
                message = result.Message;
                messageCssClass = "text-danger";
            }
        }


    }

}