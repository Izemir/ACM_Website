@inject ISnackbar Snackbar
@inject IOrderService OrderService
@inject IFileService FileService
@inject IJSRuntime JS
@using System.IO;



<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            Заказ по @Construction.ConstructionName
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudTextField @bind-Value="Order.OrderStatus.Description" Label="Статус заказа" ReadOnly="true" Variant="Variant.Text" />
        @if (ViewerId == Executor.Id)
        {
            @if (Order.OrderStatus.Id == 2 || Order.OrderStatus.Id == 4 || Order.OrderStatus.Id == 6 || Order.OrderStatus.Id == 8)
            {
                <MudButton OnClick="@(() => ChangeStatus())"
                           StartIcon="@Icons.Material.Filled.Update"
                           Variant="Variant.Filled"
                           Color="Color.Primary">Изменить статус на @Order.NextOrderStatus.Description</MudButton>
                    }

        }
        else
        {
            <MudButton OnClick="@(() => ChangeStatus())"
                       StartIcon="@Icons.Material.Filled.Update"
                       Variant="Variant.Filled"
                       Color="Color.Primary">Изменить статус на @Order.NextOrderStatus.Description</MudButton>
                }

        <MudText Typo="Typo.body1" Align="Align.Left">
            Объект
        </MudText>
        <MudTextField @bind-Value="Construction.ConstructionName" Label="Название объекта" ReadOnly="true" Variant="Variant.Text" />
        @foreach (var s in Construction.Services)
        {
            <MudTextField @bind-Value="s.ServiceName" ReadOnly="true" Variant="Variant.Text" />
        }
        <MudDivider />
        <MudText Typo="Typo.body1" Align="Align.Left">
            Исполнитель
        </MudText>
        <MudTextField @bind-Value="Executor.Name" Label="Имя исполнителя" ReadOnly="true" Variant="Variant.Text" />
        <MudTextField @bind-Value="Executor.Contacts[0].Address" Label="Контакт" ReadOnly="true" Variant="Variant.Text" />
        <MudDivider />
        <MudTable Items="@Files" Dense="true" Hover="true" Bordered="true" Striped="true">
            <ToolBarContent>
                <MudText Typo="Typo.h6">Файлы по заказу</MudText>
                <MudSpacer />
            </ToolBarContent>
            <HeaderContent>
                <MudTh>Название</MudTh>
                <MudTh>Скачать</MudTh>
                <MudTh>Удалить</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>@context.FileName</MudTd>
                <MudTd>
                    <MudButton HtmlTag="label"
                               Variant="Variant.Filled"
                               Color="Color.Info"
                               Class="mr-5"
                               OnClick="(()=>DownloadFile(context.Id))"
                               StartIcon="@Icons.Filled.CloudDownload">
                    </MudButton>
                </MudTd>
                <MudTd>
                    <MudButton HtmlTag="label"
                               Variant="Variant.Filled"
                               Color="Color.Error"
                               Class="mr-5"
                               OnClick="(()=>DeleteFile(context.Id))"
                               StartIcon="@Icons.Filled.Delete">
                    </MudButton>
                </MudTd>
            </RowTemplate>
        </MudTable>
        <InputFile id="fileInput" OnChange="UploadFiles" hidden multiple />
        <MudButton HtmlTag="label"
                   Variant="Variant.Filled"
                   Color="Color.Primary"
                   Class="mr-5"
                   StartIcon="@Icons.Filled.CloudUpload"
                   for="fileInput">
            Прикрепить файл
        </MudButton>
        <MudDivider />
        <MudLink Href="https://zoom.us/start/videomeeting">Созвониться</MudLink>
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Primary" OnClick="Submit">OK</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter] public Order Order { get; set; }

    [Parameter] public WebExecutor Executor { get; set; }

    [Parameter] public Construction Construction { get; set; }

    [Parameter] public long ViewerId { get; set; }

    [Parameter] public List<UserFile> Files { get; set; }

    public string Error { get; set; } = string.Empty;

    void Submit() => MudDialog.Close(DialogResult.Ok(true));

    private async void ChangeStatus()
    {

        var request = await OrderService.ChangeOrderStatus(Order.Id);
        if (request.Success)
        {
            Order = request.Data;
            StateHasChanged();
            Snackbar.Add("Статус изменен", Severity.Success);
        }
        else
        {
            Snackbar.Add("Ошибка", Severity.Error);
        }


    }

    private async Task DownloadFile(long fileId)
    {
        var request = await FileService.GetFile(fileId);
        if (request.Success)
        {
            var file = request.Data;
            var base64String = Convert.ToBase64String(file.FileContent);
            var fileName = file.FileName;

            await JS.InvokeVoidAsync("downloadFile", "application/vnd.openxmlformats-officedocument.wordprocessingml.document", base64String, fileName);
        }
        else
        {
            Snackbar.Add("Ошибка: " + request.Message, Severity.Error);
        }
    }

    private async Task DeleteFile(long fileId)
    {
        var request = await FileService.DeleteFileOfOrder(Order.Id, fileId);
        if (request.Success)
        {
            Files = request.Data;
        }
        else
        {
            Snackbar.Add("Ошибка: " + request.Message, Severity.Error);
        }
    }

    private async Task UploadFiles(InputFileChangeEventArgs e)
    {
        foreach (var file in e.GetMultipleFiles())
        {
            using (var ms = new MemoryStream())
            {
                await file.OpenReadStream().CopyToAsync(ms);

                var newFile = new UserFile() { FileName = file.Name, FileContent = ms.ToArray() };
                var request = await FileService.AddFileToOrder(Order.Id, newFile);
                if (request.Success)
                {
                    Files = request.Data;
                }
                else
                {
                    Snackbar.Add("Ошибка: " + request.Message, Severity.Error);
                }
            }
        }
    }
}
