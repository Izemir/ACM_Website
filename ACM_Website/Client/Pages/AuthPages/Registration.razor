@page "/register"
@inject IAuthService AuthService
@inject ILocalStorageService LocalStorage
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

@using Microsoft.AspNetCore.WebUtilities

<h3>Регистрация</h3>

<EditForm Model="user" OnValidSubmit="HandleRegistration">
    <DataAnnotationsValidator />
    <div class="mb-3">
        <label for="username">Имя пользователя</label>
        <InputText id="username" @bind-Value="user.Username" class="form-control" />
        <ValidationMessage For="@(() => user.Username)" />
    </div>
    <div class="mb-3">
        <label for="email">Email</label>
        <InputText id="email" @bind-Value="user.Email" class="form-control" />
        <ValidationMessage For="@(() => user.Email)" />
    </div>
    <div class="mb-3">
        <label for="password">Пароль</label>
        <InputText id="password" @bind-Value="user.Password" class="form-control" type="password" />
        <ValidationMessage For="@(() => user.Password)" />
    </div>
    <div class="mb-3">
        <label for="confirmPassword">Подтверждение пароля</label>
        <InputText id="confirmPassword" @bind-Value="user.ConfirmPassword" class="form-control" type="password" />
        <ValidationMessage For="@(() => user.ConfirmPassword)" />
    </div>
    <div class="mb-3">
        <label for="role">Тип пользователя</label>
        <InputSelect id="role" @bind-Value="user.Role" class="form-control">
            @foreach (var role in Roles)
            {
                <option value="@role">@role</option>
            }
        </InputSelect>
    </div>
    <button type="submit" class="btn btn-primary">Зарегистрироваться</button>
    <div class="@messageCssClass">
        <span>@message</span>
    </div>
</EditForm>

@code {
    UserRegister user = new UserRegister();

    string message = string.Empty;
    string messageCssClass = string.Empty;

    private string returnUrl = string.Empty;

    private List<string> Roles = new List<string>() { "Заказчик", "Исполнитель" };

    protected override void OnInitialized()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("returnUrl", out var url))
        {
            returnUrl = url;
        }
    }


    async Task HandleRegistration()
    {
        var result = await AuthService.Register(user);
        message = result.Message;
        if (result.Success)
        {
            message = string.Empty;

            await LocalStorage.SetItemAsync("username", result.Data.Username);
            await LocalStorage.SetItemAsync("id", result.Data.Id);
            switch (result.Data.Role)
            {
                case "Администратор":
                    await LocalStorage.SetItemAsync("role", new String("-"));
                    break;
                case "Заказчик":
                    await LocalStorage.SetItemAsync("role", new String("Customer"));
                    break;
                case "Исполнитель":
                    await LocalStorage.SetItemAsync("role", new String("Executor"));
                    break;
                default: break;
            }
            await AuthenticationStateProvider.GetAuthenticationStateAsync();
            //if (string.IsNullOrEmpty(returnUrl)) returnUrl = "/profile";
            returnUrl = "/";
            NavigationManager.NavigateTo(returnUrl);
            StateHasChanged();

        }
        else
            messageCssClass = "text-danger";
    }
}
