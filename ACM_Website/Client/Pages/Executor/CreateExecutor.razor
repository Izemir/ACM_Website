@page "/createexecutor"
@page "/createexecutor/{executorId:long}"
@inject IExecutorService ExecutorService
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager

<h3>Создание исполнителя</h3>

@if (ExecutorId!=null && executor==null)
{
    <span>Загрузка...</span>
    <div class="@messageCssClass">
        <span>@message</span>
    </div>
}
else
{
<MudGrid>
    <MudItem xs="7">
        <EditForm Model="executor">
            <DataAnnotationsValidator />
            <div class="mb-3">
                <label for="name">ФИО</label>
                <InputText id="name" @bind-Value="executor.Name" class="form-control" />
                <ValidationMessage For="@(() => executor.Name)" />
            </div>
            <div class="mb-3">
                <label for="inn">ИНН</label>
                <InputText id="inn" @bind-Value="executor.INN" class="form-control" />
                <ValidationMessage For="@(() => executor.INN)" />
            </div>
            <div class="dropdown-divider"></div>
            <div class="mb-3">
                <label for="contact">Контакт</label>
                <InputText id="contact" @bind-Value="executor.Contacts[0].Address" class="form-control" />
                <ValidationMessage For="@(() => executor.Contacts[0].Address)" />
            </div>
            <div class="form-group">
                <label for="speciality">Специальность</label>
                <InputSelect id="speciality" @bind-Value="specId" class="form-control">
                    @if (SpecialityList != null)
                    {
                        @foreach (var spec in SpecialityList)
                        {
                            <option value="@spec.Id">@spec.SpecialityName</option>
                        }
                    }
                </InputSelect>
                <button class="btn btn-secondary" @onclick="(() => AddSpeciality(specId))">Добавить специальность</button>
            </div>
            <div class="form-group">
                <label for="competency">Навыки</label>
                <InputSelect id="competency" @bind-Value="compId" class="form-control">
                    @foreach (var comp in CompetencyList)
                    {
                        <option value="@comp.Id">@comp.CompetencyName</option>
                    }
                </InputSelect>
                <button class="btn btn-secondary" @onclick="(() => AddCompetency(compId))">Добавить навык</button>
            </div>

        </EditForm>
    </MudItem>
    <MudItem xs="5">
        <MudTable Items="ChosenSpecialityList" Hover="true" Striped="true" Dense="true" Class="mb-2">
            <HeaderContent>
                <MudTh>Название</MudTh>
                <MudTh></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Name">@context.SpecialityName</MudTd>
                <MudTd DataLabel="Delete">
                    <MudIconButton OnClick="(() => DeleteSpeciality(context.Id))"
                                   Icon="@Icons.Material.Filled.Delete"
                                   Color="Color.Primary"
                                   Variant="Variant.Filled"></MudIconButton>
                </MudTd>
            </RowTemplate>
        </MudTable>
        <MudDivider />
        <MudTable Items="ChosenCompetencyList" Hover="true" Striped="true" Dense="true" Class="mb-2">
            <HeaderContent>
                <MudTh>Название</MudTh>
                <MudTh></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Name">@context.CompetencyName</MudTd>
                <MudTd DataLabel="Delete">
                    <MudIconButton OnClick="(() => DeleteCompetency(context.Id))"
                                   Icon="@Icons.Material.Filled.Delete"
                                   Color="Color.Primary"
                                   Variant="Variant.Filled"></MudIconButton>
                </MudTd>
            </RowTemplate>
        </MudTable>
    </MudItem>
</MudGrid>

<button type="submit" class="btn btn-primary" @onclick="HandleCreation">Сохранить</button>
<div class="@messageCssClass">
    <span>@message</span>
</div>
}


@code {

    [Parameter]
    public long? ExecutorId { get; set; }

    private long specId { get; set; } = 0;
    private long compId { get; set; } = 0;
    private WebExecutor executor { get; set; }

    string message = string.Empty;
    string messageCssClass = string.Empty;

    public List<Competency> CompetencyList { get; set; }
    public List<Speciality> SpecialityList { get; set; }

    public List<Speciality> ChosenSpecialityList { get; set; }

    public List<Competency> ChosenCompetencyList { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (ExecutorId != null)
        {
            var userId = long.Parse(await LocalStorage.GetItemAsStringAsync("id"));
            var request = await ExecutorService.ExistExecutor(userId);
            if (request.Success)
            {
                if (request.Data == ExecutorId)
                {
                    var oldExecutor = await ExecutorService.GetExecutor(ExecutorId.Value);
                    if (oldExecutor.Success)
                    {
                        ChosenCompetencyList = oldExecutor.Data.Competency;
                        ChosenSpecialityList = oldExecutor.Data.Speciality;
                        executor = oldExecutor.Data;

                    }
                    else
                    {
                        message = request.Message;
                        messageCssClass = "text-danger";
                    }
                }
                else
                {
                    message = "Нет прав на изменение";
                    messageCssClass = "text-danger";
                }

            }
            else
            {
                message = request.Message;
                messageCssClass = "text-danger";
            }

        }
        else
        {

            executor = new WebExecutor();
            ChosenSpecialityList = new List<Speciality>();
            ChosenCompetencyList = new List<Competency>();
            executor.Contacts = new List<Contact>() { new Contact() { Address = "" } };
        }

        SpecialityList = new List<Speciality>();

        CompetencyList = new List<Competency>();

        var specs = await ExecutorService.GetSpecialityList();
        if (specs.Success)
        {
            SpecialityList = specs.Data;
            specId = SpecialityList[0].Id;
        }
        var comps = await ExecutorService.GetCompetencyList();
        if (comps.Success)
        {
            CompetencyList = comps.Data;
            compId = CompetencyList[0].Id;
        }


    }

    void AddSpeciality(long id)
    {
        var spec = SpecialityList.First(i => i.Id == id);
        ChosenSpecialityList.Add(spec);
    }

    void DeleteSpeciality(long id)
    {
        var delete = ChosenSpecialityList.First(i => i.Id == id);
        ChosenSpecialityList.Remove(delete);
    }

    void AddCompetency(long id)
    {
        var comp = CompetencyList.First(i => i.Id == id);
        ChosenCompetencyList.Add(comp);
    }

    void DeleteCompetency(long id)
    {
        var delete = ChosenCompetencyList.First(i => i.Id == id);
        ChosenCompetencyList.Remove(delete);
    }

    async Task HandleCreation()
    {
        if (ChosenCompetencyList == null
            || ChosenSpecialityList == null
            || string.IsNullOrEmpty(executor.Name)
            || string.IsNullOrEmpty(executor.INN) ||
            string.IsNullOrEmpty(executor.Contacts[0].Address))
        {
            message = "Не заполнены все поля";
            messageCssClass = "text-danger";
        }
        else
        {
            if (ExecutorId != null)
            {
                executor.Competency = ChosenCompetencyList;
                executor.Speciality = ChosenSpecialityList;
                var result = await ExecutorService.UpdateExecutor(executor);
                message = result.Message;
                if (result.Success)
                {
                    NavigationManager.NavigateTo("executor");
                }
                else
                {
                    message = result.Message;
                    messageCssClass = "text-danger";
                }
            }
            else
            {
                var id = await LocalStorage.GetItemAsStringAsync("id");
                executor.Competency = ChosenCompetencyList;
                executor.Speciality = ChosenSpecialityList;
                var result = await ExecutorService.AddExecutor(executor, long.Parse(id));

                message = result.Message;
                if (result.Success)
                {
                    NavigationManager.NavigateTo("executor");
                }
                else
                {
                    message = result.Message;
                    messageCssClass = "text-danger";
                }
            }


        }
    }
}
