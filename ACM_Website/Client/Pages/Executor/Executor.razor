@page "/executor"
@page "/executor/{executorId:long}"
@inject IExecutorService ExecutorService
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager
@inject IAuthService AuthService
@inject IModeratorService ModeratorService
@inject ICustomerService CustomerService
@inject IChatService ChatService

@if (executor == null)
{
    <span>Загрузка...</span>
    <div class="@messageCssClass">
        <span>@message</span>
    </div>
}
else
{
    <h3>Исполнитель</h3>
    <div class="name">
        <h5>Имя</h5>
        <span>@(executor.Name+(executor.Approved ? " [Одобрен]":""))</span><br />
    </div>
    <div class="inn">
        <h5>ИНН</h5>
        <span>@executor.INN</span><br />
    </div>
    <div class="contact">
        <h5>Контакт</h5>
        <span>@executor.Contacts[0].Address</span><br />
    </div>
    <MudTable Items="executor.Speciality" Hover="true" Striped="true" Dense="true" Class="mb-2">
        <HeaderContent>
            <MudTh>Специальности</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Name">@context.SpecialityName</MudTd>
        </RowTemplate>
    </MudTable>
    <MudTable Items="executor.Competency" Hover="true" Striped="true" Dense="true" Class="mb-2">
        <HeaderContent>
            <MudTh>Навыки</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Name">@context.CompetencyName</MudTd>
        </RowTemplate>
    </MudTable>



    @if (IsMine)
    {
        <MudButton StartIcon="@Icons.Material.Filled.ChangeHistory"
                   Variant="Variant.Filled"
                   Color="Color.Primary"
                   Class="mr-5"
                   OnClick="@(()=>Change(executor.Id))">
            Изменить
        </MudButton>

        <MudButton StartIcon="@Icons.Material.Filled.Chat"
                   Variant="Variant.Filled"
                   Color="Color.Primary"
                   Class="mr-5"
                   OnClick="@(()=>ShowChats(executor.Id))">
            Чаты исполнителя
        </MudButton>

        <MudButton StartIcon="@Icons.Material.Filled.Search"
                   Variant="Variant.Filled"
                   Color="Color.Primary"
                   Class="mr-5"
                   OnClick="@(()=>SearchConstructions(executor.Id))">
            Поиск объектов
        </MudButton>

        <MudButton StartIcon="@Icons.Material.Filled.Delete"
                   Variant="Variant.Filled"
                   Color="Color.Error"
                   Class="mr-5"
                   OnClick="@((Delete))">
            Удалить
        </MudButton>

        <InputFile id="fileInput" OnChange="UploadFiles" hidden multiple />

        <MudButton HtmlTag="label"
                   Variant="Variant.Filled"
                   Color="Color.Primary"
                   Class="mr-5"
                   StartIcon="@Icons.Filled.CloudUpload"
                   for="fileInput">
            Прикрепить файлы
        </MudButton>

        @if (files != null)
        {
            <MudText Typo="@Typo.h6">@files.Count() File@(files.Count() == 1 ? "" : "s"):</MudText>
            <MudList>
                @foreach (var file in files)
                {
                    <MudListItem Icon="@Icons.Filled.AttachFile" @key="@file">
                        @file.Name <code>@file.Size bytes</code>
                    </MudListItem>
                }
            </MudList>
        }
    }
    else
    {
        <MudButton OnClick="@(() => StartChat(executor.Id))"
                   StartIcon="@Icons.Material.Filled.Send"
                   Variant="Variant.Filled"
                   Color="Color.Primary">Написать</MudButton>
    }

    @if (IsAdmin)
    {
        <MudButton OnClick="@(() => ApproveExecutor())"
                   StartIcon="@Icons.Material.Filled.Approval"
                   Variant="Variant.Filled"
                   Color="Color.Warning"
                   Disabled="executor.Approved">Одобрить</MudButton>
    }



    <div class="@messageCssClass">
        <span>@message</span>
    </div>
}

@code {
    [Parameter]
    public long? ExecutorId { get; set; }

    private WebExecutor executor;

    public long Id { get; set; }

    public bool IsMine { get; set; } = false;

    public long userId { get; set; }

    public bool IsAdmin { get; set; } = false;

    string message = string.Empty;
    string messageCssClass = string.Empty;

    IList<IBrowserFile> files = new List<IBrowserFile>();
    List<UserFile> userFiles = new List<UserFile>();
    private void UploadFiles(InputFileChangeEventArgs e)
    {
        foreach (var file in e.GetMultipleFiles())
        {
            var buffer = new byte[file.Size];
            var format = file.ContentType;
            var data = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
            userFiles.Add(new UserFile { Data = data });
            files.Add(file);

        }
        //TODO upload the files to the server
    }

    protected override async Task OnInitializedAsync()
    {
        userId = long.Parse(await LocalStorage.GetItemAsStringAsync("id"));
        var admin = await AuthService.IsAdmin(userId);
        if (admin.Success)
        {
            IsAdmin = admin.Data;
        }

        if (ExecutorId == null)
        {

            var request = await ExecutorService.ExistExecutor(userId);
            if (request.Success)
            {
                if (request.Data != 0)
                {
                    Id = request.Data;
                    await GetData(Id);
                }
                else
                {
                    NavigationManager.NavigateTo("createexecutor");
                }

            }
            else
            {
                message = request.Message;
                messageCssClass = "text-danger";
            }
        }
        else
        {

            await GetData(ExecutorId.Value);
        }
    }

    async Task GetData(long executorId)
    {
        var executorRequest = await ExecutorService.GetExecutor(executorId);
        if (executorRequest.Success)
        {
            executor = executorRequest.Data;
            if (executor.UserId == userId) IsMine = true;
        }
        else
        {
            message = executorRequest.Message;
            messageCssClass = "text-danger";

        }
    }

    async Task Delete()
    {
        var result = await ExecutorService.DeleteExecutor(userId);
        if (result.Success)
        {
            NavigationManager.NavigateTo("createexecutor");
        }
        else
        {
            message = result.Message;
            messageCssClass = "text-danger";
        }
    }

    void Change(long executorId)
    {
        NavigationManager.NavigateTo($"createexecutor/{executorId}");
    }

    void ShowChats(long executorId)
    {
        NavigationManager.NavigateTo($"executorchats/{executorId}");
    }

    void SearchConstructions(long executorId)
    {
        NavigationManager.NavigateTo($"searchconstr/{executorId}");
    }

    async Task ApproveExecutor()
    {
        var userId = long.Parse(await LocalStorage.GetItemAsStringAsync("id"));
        var request = await ModeratorService.ApproveExecutor(userId, executor.Id);

        if (request.Success)
        {
            executor = request.Data;
        }
        else
        {
            message = request.Message;
            messageCssClass = "text-danger";
        }
    }

    async Task StartChat(long id)
    {
        var userId = long.Parse(await LocalStorage.GetItemAsStringAsync("id"));
        var customer = await CustomerService.ExistCustomer(userId);
        if (customer.Success && customer.Data != 0)
        {
            long chatId = 0;
            var existChat = await ChatService.ExistChat(customer.Data, id);
            if (existChat.Success && existChat.Data != 0)
            {
                chatId = existChat.Data;
                NavigationManager.NavigateTo($"/chat/{chatId}");
            }
            else
            {
                var newChat = await ChatService.StartNewChat(customer.Data, id);
                if (newChat.Success)
                {
                    chatId = newChat.Data.Id;
                    NavigationManager.NavigateTo($"/chat/{chatId}");
                }
                else
                {
                    message = newChat.Message;
                    messageCssClass = "text-danger";
                }
            }
        }
        else
        {
            message = "Нет такого заказчика";
            messageCssClass = "text-danger";
        }
    }

}
